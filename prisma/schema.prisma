// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ✅ Brand Table
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  logoUrl  String?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Category Table
model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Availability Table
model Availability {
  id       Int       @id @default(autoincrement())
  status   String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Product Table
model Product {
  id                Int     @id @default(autoincrement())
  name              String
  model             String?
  productCode       String  @unique
  description       String?
  deliveryTimescale String?
  specifications    Json?

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  availabilityId Int
  availability   Availability @relation(fields: [availabilityId], references: [id])

  variants          ProductVariant[]
  specificationsRel Specification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ ProductVariant Table
model ProductVariant {
  id            Int      @id @default(autoincrement())
  color         String?
  storage       String?
  ram           String?
  regularPrice  Float
  discountPrice Float?
  stockQty      Int      @default(0)
  images        String[]

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Specification Table
model Specification {
  id    Int    @id @default(autoincrement())
  key   String
  value String

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
