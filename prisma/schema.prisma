// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  firstName String?
  lastName  String?
  email     String  @unique
  password  String

  @@index([id, email, userId])
  @@map("users")
}

/// ✅ Brand Table
model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  logoUrl  String?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Category Table
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Availability Enum
enum AvailabilityStatus {
  IN_STOCK
  OUT_OF_STOCK
  PREORDER
  DISCONTINUED
}

/// ✅ Product Table
model Product {
  id                Int     @id @default(autoincrement())
  name              String
  model             String?
  description       String?
  deliveryTimescale String?

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  availability AvailabilityStatus

  variants       ProductVariant[]
  specifications ProductSpecification[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductImage ProductImage[]

  @@index([name])
  @@index([brandId])
  @@index([categoryId])
}

/// ✅ ProductVariant Table
model ProductVariant {
  id            Int    @id @default(autoincrement())
  productCode   String @unique
  regularPrice  Float
  discountPrice Float?
  stockQty      Int    @default(0)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  images         ProductImage[]
  specifications ProductVariantSpecification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ✅ Product Images
model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  sortOrder Int     @default(0)

  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  variantId Int?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

/// ✅ Specifications System
model SpecificationsType {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AllSpecifications AllSpecifications[]
}

model AllSpecifications {
  id        Int                @id @default(autoincrement())
  value     String
  typeId    Int
  type      SpecificationsType @relation(fields: [typeId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  ProductSpecification        ProductSpecification[]
  ProductVariantSpecification ProductVariantSpecification[]
}

/// ✅ Product ↔ Specifications
model ProductSpecification {
  id              Int               @id @default(autoincrement())
  productId       Int
  specificationId Int
  product         Product           @relation(fields: [productId], references: [id])
  specification   AllSpecifications @relation(fields: [specificationId], references: [id])
}

/// ✅ Variant ↔ Specifications
model ProductVariantSpecification {
  id              Int               @id @default(autoincrement())
  variantId       Int
  specificationId Int
  variant         ProductVariant    @relation(fields: [variantId], references: [id])
  specification   AllSpecifications @relation(fields: [specificationId], references: [id])
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
